public abstract class Repository<T>
{
	private SqlConnection db;

	private IMapper<T> _mapper;

	protected string DBFormat(string provider, params object[] parameters)
	{
		object[] sanitized = new object[parameters.Length];
		for (int i = 0; i < parameters.Length; i++)
		{
			sanitized[i] = parameters[i].ToString().Replace("'", "''");
		}
		return string.Format(provider, sanitized);
	}

	protected Repository(SqlConnection connection, IMapper<T> mapper)
	{
		db = connection;
		_mapper = mapper;
	}

	protected IEnumerable<T> ExecuteQuery(string cmd)
	{
		return ExecuteQuery(cmd, _mapper.Map);
	}

	protected IEnumerable<TD> ExecuteQuery<TD>(string cmd, Func<SqlDataReader, TD> map)
	{
		SqlCommand command = BuildCommand(cmd, false);
		using (var reader = command.ExecuteReader())
		{
			while (reader.Read())
			{
				yield return map(reader);
			}
		}
	}

	protected void ExecuteNonQuery(string cmd)
	{
		using (SqlCommand command = BuildCommand(cmd, false))
		{
			command.ExecuteNonQuery();
		}
	}

	private SqlCommand BuildCommand(string cmd, bool sproc)
	{
		var command = new SqlCommand(cmd, db);
		command.CommandType = sproc ? System.Data.CommandType.StoredProcedure : System.Data.CommandType.Text;
		return command;
	}
}

public interface IMapper<T>
{
	T Map(SqlDataReader reader);
}

public abstract class Mapper<T> : IMapper<T>
{
	public abstract T Map(SqlDataReader reader);

	protected DateTime ToDateTime(object value)
	{
		return DateTime.Parse(value.ToString());
	}

	protected int? ToNullableInt(object value)
	{
		int? result = null;
		if (value != DBNull.Value)
		{
			result = int.Parse(value.ToString());
		}
		return result;
	}

	protected int ToInt(object value)
	{
		return int.Parse(value.ToString());
	}

	protected string ToString(object value)
	{
		string result = null;
		if (value != DBNull.Value)
		{
			result = value.ToString();
		}
		return result;
	}

	protected bool ToBool(object value)
	{
		return bool.Parse(value.ToString());
	}

	protected bool? ToNullableBool(object value)
	{
		bool? result = null;
		if (value != DBNull.Value)
		{
			result = bool.Parse(value.ToString());
		}
		return result;
	}

	protected double ToDouble(object value)
	{
		return double.Parse(value.ToString());
	}
}
